#Get a json which contains all efects for a specific protein name
# proteinName is the name of the protein and limit is the limit of effects that will be in JSON
#you should use python 3 to run this

import requests, sys, json

def predict(gene):
  return "at4g40080-like protein"


proteinJSON = '{"id": "BnaC09g12820D","gene": "ATGGCTACTGGAGAAAACAGAACCGTGCAGGAAAATCTAAAGAAACACCTCGCAGTTTCAGTTCGAAACATTCAATGGAGTTATGGAATATTTTGGTCTATCTCTGCTTCTCAACCAGGAGTGCTGGAATGGGGAGATGGATACTACAATGGAGACATTAAGACGAGGAAGACGATTCAAGCAGTGGAAGTCAAAGCTGACCAGTTGGGTCTTGAGAGAAGCGATCAGCTTAGAGAGCTTTATGAATCTCTCTCGGTCGCGGAATCCTCAGCCTCCGGTGGCTCTCAGGTCAGTAGACGAGCTTCCGCTACCGCTCTCTCTCCGGAAGATCTCACCGACACCGAGTGGTACTACCTAGTATGCATGTCTTTCGTCTTCAACATTGGTGAAGGAATTACCGGAGGAGCATTAGGGAACGGAGAACCAATATGGCTATGTAACGCTCATACCGCCGACAGCAAAGTCTTTACTCGCTCTCTTCTCGCTAAAAGTGCTTCGCTTCTGACAGTAGTTTGCTTCCCATTTCTTGGAGGAGTCCTTGAGATCGGCACAACCGAACATATTACAGAGGACTTTAACGTGATTCAATGCGTGAAGACATTATTCCTTGAGGCTCATCCTTATGGAACTATATCAACGAGATCTGATTATCAAGAAATATTTGATCCTTTAAACAGCGATAAGTACATTCCAACGTTTGGAACTGAAGCTTTTCCGACAACTTCTACAAGCGTGTTTGAACAAGAACTAGAGGATCATGATTCGTTCATCAACGGTGGTGGTGCGTCTCAGGTACAAAGCTGGCAGTTTGTGGGTGAAGAACTCAATAACTGCGTTCACCAACCGGTTAATTCTAGCGATTGCGTTTCCCAGACGTTTGTTGGAGGAACAACCGGAAGAGTTTCTTGTAATCCAAGAAAGAGCAGGCCTCAACGGTTAGGTCAAATCCAAGAACAGAGTAACCGTTTGAATATGGACGATGATGTTCATTACCAAGGGGTGATCTCGACAATATTCAAAACAACGCATCAGCTAGTTCTTGGACCGCAATTTCAGAACTTTGATAAGCGGTCAAGTTTCACGCGGTGGAGGCGGTTGCCATTATCAGCAAAAACATTGGGAGAGAAGTCGCAAAACATGTTAAAGAAGATTGTTTTTGAGGTTCCTCGGATGCACCAGAAGGAGTTGTTGTTACCAGACACACCTGAAGATAACATGTTTAAGGTTGGGGATGAAACCGGGAACCATGCCTTGTCCGAGAGGAAATGCCGAGAGAAGTTGAATGATCGGTTCATGACGTTGAGATCAATCATTCCTTCGATTAGTAAGATCGATAAAGTGTCGATTCTTGATGATACGATTGATTATCTTCAAGAACTGCAAAGACGGGTTCAAGAATTGGAATCTTGCCGAGAATATACCGATACAGAGATGCAAATGCCTATGAAGAGGAAGAAACCGGAGGATGAAGATGAGAGAGCATCGGCTAATTGTTTGAACACCAAGAGGAAGGAGAGTGATGTGAACGTAGGAGAAGATGAACCAGCTGATACCGGTTATGCTGGTTTAACTGATAATCTAAGGATCGGTTCGTTTGGCAATGAGGTGGTTATTGAGCTTAGATGTGCTTGGAGAGAAGGTATACTGCTTGAGATAATGGATGTGATTAGTCATCTCAATTTGGATTCTCACTCGGTACAGTCCTCGACTGGGGACGGTTTACTCTGCCTAACTGTCAATTGCAAGCATAAAGGGACAAATATCGCCACAGCAGGAATGATCCAAGAGGCACTTCAAAGAGTTGCATGGATATGTTAA"}'

protein = json.loads(proteinJSON)

#print(protein['id'], protein['gene'])
#print(predict(protein['gene']))


proteinName = predict(protein['gene'])
limit = 25


proteinName = proteinName.replace(' ', '%20')

requestURL = "https://www.ebi.ac.uk/QuickGO/services/ontology/go/search?query=" + str(proteinName) + "&limit=" + str(limit) + "&" + "page=1"

r = requests.get(requestURL, headers={ "Accept" : "application/json"})

if not r.ok:
  r.raise_for_status()
  sys.exit()

responseBody = r.text
parsed = json.loads(responseBody)

effects = []

for result in parsed["results"]:
  effect = "\t{\n"
  effect += "\t\t\"goId\": \"" + result["id"] + "\",\n"
  effect += "\t\t\"effect\": \"" + result["name"] + "\"\n"
#  returnJSON += "\"aspect\": \"" + result["aspect"] + "\",\n"
  effect += "\t}"
  effects.append(effect)

returnJSON = "[\n" + ",\n".join(effects) + "\n]"

print(returnJSON)